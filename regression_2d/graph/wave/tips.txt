
function:
z = np.exp(-0.25 * np.sqrt(x1**2 + x2**2)) 
    * np.cos(2 * np.sqrt(x1**2 + x2**2))

min_x1 = -5, max_x1 = 5
min_x2 = -5, max_x2 = 5

parameters:
train_n = 1000
test_n = 500
epoch_n = 300
batchsize = 10

LOSS result:

　DELL inspiron13
  train LOSS = 0.00494688552688
  test LOSS = 0.00593277346343
  execution time : 60.8407940865

　Lab PC
　　train LOSS = 0.00795608226908
　　test LOSS = 0.00642704451457
  execution time = 46.6128280163


Network:
class MyChain(Chain):
    def __init__(self):
        super(MyChain, self).__init__(
            l1 = L.Linear(2,16),
            l2 = L.Linear(16,32),
            l3 = L.Linear(32,48),
            l4 = L.Linear(48,1)
        )

    def __call__(self, x,y): #calculate error
        x_ = Variable(x.astype(np.float32).reshape(len(x),2))
        y_ = Variable(y.astype(np.float32).reshape(len(y),1))
        return F.mean_squared_error(self.predict(x_),y_)

    def predict(self, x): #calculate network output
        h1 = F.leaky_relu(self.l1(x))
        h2 = F.leaky_relu(self.l2(h1))
        h3 = F.leaky_relu(self.l3(h2))
        h4 = F.leaky_relu(self.l4(h3))
        return h4

    def get(self,x): #confirm tearning result
        x__ = Variable(np.array([x]).astype(np.float32).reshape(len(x),2))
        return self.predict(x__).data

