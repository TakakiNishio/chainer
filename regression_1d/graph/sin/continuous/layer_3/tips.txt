
function:
y = np.sin(2*x)

min_x1 = -np.pi, max_x = np.pi

parameters:
train_n = 300
test_n = 200
epoch_n = 300
batchsize = 10

LOSS result:
train LOSS = 0.0437611951803
test LOSS = 0.0469014942646

execution time : 11.6827600002 (DELL inspiron13)


Network:
class MyChain(Chain):
    def __init__(self):
        super(MyChain, self).__init__(
            l1 = L.Linear(1,16),
            l2 = L.Linear(16,32),
            l3 = L.Linear(32,1),
        )

    def __call__(self, x,y): #calculate error
        x_ = Variable(x.astype(np.float32).reshape(len(x),1))
        y_ = Variable(y.astype(np.float32).reshape(len(y),1))
        return F.mean_squared_error(self.predict(x_),y_)

    def predict(self, x): #calculate network output
        h1 = F.leaky_relu(self.l1(x))
        h2 = F.leaky_relu(self.l2(h1))
        h3 = F.leaky_relu(self.l3(h2))
        return h3

    def get(self,x): #confirm tearning result
        return self.predict(Variable(np.array([x]).astype(np.float32).reshape(len(x),1))).data

