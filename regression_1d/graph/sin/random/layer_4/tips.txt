
function:
y = np.sin(2*x) + random.uniform(-error_range,error_range)

error_range = 0.05
min_x1 = -np.pi, max_x = np.pi
x = random.uniform(min_x,max_x)

parameters:
train_n = 300
test_n = 200
epoch_n = 300
batchsize = 10

LOSS result:
train LOSS = 0.00889747103211
test LOSS = 0.0157883856446

execution time : 11.4557828903 (DELL inspiron13)


Network:
class MyChain(Chain):
    def __init__(self):
        super(MyChain, self).__init__(
            l1 = L.Linear(1,16),
            l2 = L.Linear(16,32),
            l3 = L.Linear(32,48),
            l4 = L.Linear(48,1)
        )

    def __call__(self, x,y): #calculate error
        x_ = Variable(x.astype(np.float32).reshape(len(x),1))
        y_ = Variable(y.astype(np.float32).reshape(len(y),1))
        return F.mean_squared_error(self.predict(x_),y_)

    def predict(self, x): #calculate network output
        h1 = F.leaky_relu(self.l1(x))
        h2 = F.leaky_relu(self.l2(h1))
        h3 = F.leaky_relu(self.l3(h2))
        h4 = F.leaky_relu(self.l4(h3))
        return h4

    def get(self,x): #confirm tearning result
        return self.predict(Variable(np.array([x]).astype(np.float32).reshape(len(x),1))).data



